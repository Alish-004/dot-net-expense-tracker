@page "/home"
@using coursework.Service
@inject UserService UserService

<PageTitle>Home</PageTitle>

<NavMenu></NavMenu>

<div class="container mt-4">
    <!-- Welcome Section -->
    <div class="text-center bg-light p-3 rounded shadow">
        <h2 class="display-5 text-primary">Welcome Back, Admin!</h2>
        <p class="lead">Track your spending, set your goals, and achieve financial freedom!</p>
    </div>

    <!-- Stats Overview -->
    <div class="row mt-3 g-3">
        <div class="col-6 col-md-3">
            @* <div class="card text-center bg-light text-dark shadow-sm"> *@
            <div class="card text-center" style="background-color: #D1A6FF; color: white; shadow-sm;">
                <div class="card-body">
                    <h6 class="card-title">Total Expenses</h6>
                    <p class="card-text h5">@currency @totalExpenses</p> <!-- Dynamically show total expenses -->
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3">
            <div class="card text-center" style="background-color: #D1A6FF; color: white; shadow-sm;">
                <div class="card-body">
                    <h6 class="card-title">Remaining Budget</h6>
                    <p class="card-text h5">@currency @remainingBalance</p>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3">
            <div class="card text-center" style="background-color: #D1A6FF; color: white; shadow-sm;">
                <div class="card-body">
                    <h6 class="card-title">Total Inflows</h6>
                    <p class="card-text h5">@totalInflows</p>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3">
            <div class="card text-center" style="background-color: #D1A6FF; color: white; shadow-sm;">
                <div class="card-body">
                    <h6 class="card-title">Total Outflows</h6>
                    <p class="card-text h5">@totalOutflows</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Debts Overview -->
    <div class="row mt-3 g-3">
        <div class="col-6 col-md-4">
            <div class="card text-center" style="background-color: #D1A6FF; color: white; shadow-sm;">
                <div class="card-body">
                    <h6 class="card-title">Total Debts Count</h6>
                    <p class="card-text h5">@totalDebtsCount</p>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-4">
            <div class="card text-center" style="background-color: #D1A6FF; color: white; shadow-sm;">
                <div class="card-body">
                    <h6 class="card-title">Pending Debts</h6>
                    <p class="card-text h5">@pendingDebtsCount</p>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-4">
            <div class="card text-center" style="background-color: #D1A6FF; color: white; shadow-sm;">
                <div class="card-body">
                    <h6 class="card-title">Cleared Debts</h6>
                    <p class="card-text h5">@clearedDebtsCount</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Add MudChart for Debts, Outflows, Inflows -->
    <MudPaper Class="pa-4 mt-4">
        <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels"></MudChart>
    </MudPaper>

    <!-- Financial Goals & Progress -->
    <div class="mt-4 p-3 bg-light rounded shadow-sm">
        <h3 class="text-center text-secondary">Your Financial Goal</h3>
        <p class="text-center">Goal: $500 savings this month</p>
        <div class="progress" style="height: 25px;">
            <div class="progress-bar bg-primary" style="width: 30%;">30%</div>
        </div>
        <p class="text-center mt-2">Progress: $150 saved</p>
    </div>

    <!-- Main Actions -->
    <div class="mt-4 text-center">
        <!-- Updated buttons with light purple color -->
        <a href="/add-expense" class="btn" style="background-color: #D1A6FF; color: white; border-radius: 5px; padding: 15px 30px;">Add Expense</a>
        <a href="/view-expenses" class="btn" style="background-color: #D1A6FF; color: white; border-radius: 5px; padding: 15px 30px;">View Expenses</a>
    </div>
</div>

<footer class="bg-light text-dark text-center py-2 mt-4">
    <p>&copy; 2025 Expense Tracker. All rights reserved.</p>
</footer>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    private int dataSize = 3; // Initial data size is 3 (Debts, Inflows, Outflows)
    public double[] data = { 500, 2000, 800 }; // Debts, Inflows, Outflows in this order
    public string[] labels = { "Debts", "Inflows", "Outflows" };

    Random random = new Random();

    private string currency;
    private string remainingBalance = "1500.00";
    private string totalInflows = "2000.00";
    private string totalOutflows = "800.00";
    private string totalDebts = "500.00"; // Added total debts property
    private string totalExpenses;

    private int totalDebtsCount;
    private int pendingDebtsCount;
    private int clearedDebtsCount;

    void RandomizeData()
    {
        var new_data = new double[dataSize];
        for (int i = 0; i < new_data.Length; i++)
            new_data[i] = random.NextDouble() * 1000; // Randomize values
        data = new_data;
        StateHasChanged();
    }

    void AddDataSize()
    {
        if (dataSize < 20)
        {
            dataSize = dataSize + 1;
            RandomizeData();
        }
    }

    void RemoveDataSize()
    {
        if (dataSize > 0)
        {
            dataSize = dataSize - 1;
            RandomizeData();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Set initial data for the chart from service or defaults
        totalDebts = UserService.GetTotalNumberOfDebts().ToString("F2");
        totalOutflows = UserService.GetTotalNumberOfOutflows().ToString("F2");
        totalInflows = UserService.GetTotalNumberOfInflows().ToString("F2");
        remainingBalance = UserService.GetRemaingBalance().ToString("F2");
        totalExpenses = UserService.GetTotalExpenses().ToString();
        currency = UserService.GetCurrency();

        // Initialize debt counts from service
        totalDebtsCount = UserService.GetTotalNumberOfDebts();
        pendingDebtsCount = UserService.GetPendingDebtsCount();
        clearedDebtsCount = UserService.GetClearedDebtsCount();

        // Initialize the chart data and labels
        data = new double[] { Convert.ToDouble(totalDebts), Convert.ToDouble(totalInflows), Convert.ToDouble(totalOutflows) };
        labels = new string[] { "Debts", "Inflows", "Outflows" };
    }
}
