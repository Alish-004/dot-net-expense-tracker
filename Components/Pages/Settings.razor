@page "/settings"
@using coursework.Models
@using coursework.Service
@inject UserService UserService
@inject NavigationManager NavigationManager

<div class="container my-4">
    <h3 class="text-primary text-center mb-4">Account Settings</h3>

    <div class="card p-4">
        <h5 class="text-secondary mb-4">Change Username and Password</h5>

        <!-- Form for Username and Password -->
        <EditForm Model="@userSettings" OnValidSubmit="SaveSettings">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Change Username -->
            <div class="mb-3">
                <label class="form-label text-secondary" for="username">New Username</label>
                <InputText id="username" class="form-control" @bind-Value="userSettings.Username" />
                <ValidationMessage For="@(() => userSettings.Username)" />
            </div>

            <!-- Change Password -->
            <div class="mb-3">
                <label class="form-label text-secondary" for="newPassword">New Password</label>
                <InputText id="newPassword" type="password" class="form-control" @bind-Value="userSettings.NewPassword" />
                <ValidationMessage For="@(() => userSettings.NewPassword)" />
            </div>

            <!-- Confirm New Password -->
            <div class="mb-3">
                <label class="form-label text-secondary" for="confirmPassword">Confirm New Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="userSettings.ConfirmPassword" />
                <ValidationMessage For="@(() => userSettings.ConfirmPassword)" />
            </div>

            <div class="d-flex justify-content-end gap-2">
                <button class="btn btn-primary" type="submit">Save Changes</button>
                <button class="btn btn-outline-secondary" @onclick="CancelChanges">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private UserSettings userSettings = new UserSettings();

    private async Task SaveSettings()
    {
        if (userSettings.NewPassword != userSettings.ConfirmPassword)
        {
            // Add validation error for password mismatch
            return;
        }

        try
        {
            var success = false;//UserService.UpdateUserSettings(userSettings);
            if (success)
            {
                // Navigate back to home or show a success message
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                // Handle failure, show an error message
                Console.WriteLine("Failed to update settings");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating settings: {ex.Message}");
        }
    }

    private void CancelChanges()
    {
        // Optionally, reset the form to initial state or navigate away
        NavigationManager.NavigateTo("/home");
    }

    public class UserSettings
    {
        public string Username { get; set; }
        public string NewPassword { get; set; }
        public string ConfirmPassword { get; set; }
    }
}
