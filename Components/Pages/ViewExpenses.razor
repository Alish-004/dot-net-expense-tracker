@page "/view-expenses"
@using coursework.Models
@using coursework.Service
@inject UserService UserService
@inject NavigationManager NavigationManager

<div class="container my-4">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="text-primary">Manage Expenses</h3>
        <button class="btn btn-outline-primary" @onclick="NavigateToHome">
            Back to Home
        </button>
    </div>

    <!-- Filters Section -->
    <div class="card p-4 mb-4">
        <h5 class="text-secondary mb-4">Filter Expenses</h5>

        <!-- Filter by Transaction Type -->
        <div class="d-flex justify-content-start gap-2 mb-3">
            <button class="btn btn-outline-secondary" @onclick="ShowCreditExpenses">Cash Inflow</button>
            <button class="btn btn-outline-secondary" @onclick="ShowDebitExpenses">Cash Outflow</button>
            <button class="btn btn-outline-secondary" @onclick="ShowAllExpenses">All Expenses</button>
        </div>


        <!-- Filter by Date -->
        <div class="mb-3">
            <label class="form-label text-secondary">Filter by Date</label>
            <div class="row">
                <div class="col-md-6 mb-2">
                    <input type="date" class="form-control" @bind="startDate" />
                </div>
                <div class="col-md-6">
                    <input type="date" class="form-control" @bind="endDate" />
                </div>
            </div>
        </div>

        
        <!-- Apply and Clear Filters -->
        <div class="d-flex justify-content-start gap-2">
            <button class="btn btn-primary" @onclick="ApplyFilters">Apply</button>
            <button class="btn btn-outline-warning" @onclick="ClearFilters">Clear</button>
        </div>
    </div>

    <!-- Sort by Date Button -->
    <div class="mb-4 text-end">
        <button class="btn btn-outline-secondary" @onclick="SortByDate">Sort by Date</button>
    </div>

    <!-- Expenses Table -->
    <div class="card p-4">
        <h5 class="text-secondary mb-3">Expense Details</h5>
        <table class="table table-bordered table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>Date</th>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>Expense Type</th>
                    <th>Expense Tag</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredExpenses.Count > 0)
                {
                    @foreach (var expense in filteredExpenses)
                    {
                        <tr>
                            <td>@expense.Date.ToString()</td>
                            <td>@expense.Description</td>
                            <td>$@expense.Amount</td>
                            <td>@expense.TransactionType</td>
                            <td>@expense.ExpenseTag</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center">No expenses available.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Back to Home Button at Bottom -->
    <div class="text-center mt-4">
        <button class="btn btn-outline-primary" @onclick="NavigateToHome">Back to Home</button>
    </div>
</div>

@code {
    private List<Transaction> expenses = new List<Transaction>();
    private List<Transaction> filteredExpenses = new List<Transaction>();

    private decimal? minAmount;
    private decimal? maxAmount;
    private DateTime? startDate;
    private DateTime? endDate;
    private string descriptionFilter;

    private bool isDateAscending = true; // Track the sort order

    protected override async Task OnInitializedAsync()
    {
        try
        {
            expenses = UserService.GetUserExpenses();
            filteredExpenses = expenses; // Initially display all expenses
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching expenses: {ex.Message}");
        }
    }

    private void ShowCreditExpenses()
    {
        filteredExpenses = expenses.Where(e => e.TransactionType.Equals("credit", StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void ShowDebitExpenses()
    {
        filteredExpenses = expenses.Where(e => e.TransactionType.Equals("debit", StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void ShowAllExpenses()
    {
        filteredExpenses = expenses;
    }

    private void ApplyFilters()
    {
        filteredExpenses = expenses;

        if (minAmount.HasValue)
        {
            filteredExpenses = filteredExpenses.Where(e => e.Amount >= minAmount.Value).ToList();
        }

        if (maxAmount.HasValue)
        {
            filteredExpenses = filteredExpenses.Where(e => e.Amount <= maxAmount.Value).ToList();
        }

        if (startDate.HasValue)
        {
            filteredExpenses = filteredExpenses.Where(e => e.Date >= startDate.Value).ToList();
        }

        if (endDate.HasValue)
        {
            filteredExpenses = filteredExpenses.Where(e => e.Date <= endDate.Value).ToList();
        }

        if (!string.IsNullOrWhiteSpace(descriptionFilter))
        {
            filteredExpenses = filteredExpenses
                .Where(e => e.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void ClearFilters()
    {
        minAmount = null;
        maxAmount = null;
        startDate = null;
        endDate = null;
        descriptionFilter = null;
        filteredExpenses = expenses;
    }

    private void SortByDate()
    {
        if (isDateAscending)
        {
            filteredExpenses = filteredExpenses.OrderBy(e => e.Date).ToList();
        }
        else
        {
            filteredExpenses = filteredExpenses.OrderByDescending(e => e.Date).ToList();
        }

        isDateAscending = !isDateAscending; // Toggle the sort order
    }

    private async Task NavigateToHome()
    {
        NavigationManager.NavigateTo("/home");
    }
}
